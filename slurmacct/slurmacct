#!/usr/bin/env bash

# Summarize TOP USER accounting information from Slurm sacct accounting records
# Author:	Ole.H.Nielsen@fysik.dtu.dk
# Homepage: https://github.com/OleHolmNielsen/Slurm_tools/

#####################################################################################
#
# Command usage:
#
function usage()
{
	cat <<EOF
Usage: slurmacct [-s Start_time -e End_time | -c | -y | -w | -m monthyear] [-p partition(s)] [-u username] [-g groupname] [-G] [-T/-N] [-W workdir] [-r report-prefix] [-n] [-h]
where:
	-s Start_time [last month]: Starting time of accounting period.
	-e End_time [last month]: End time of accounting period.
	-c: Current month
	-y: Current year
	-w: Last week
	-m monthyear: Select month and year (like "november2019")
	-p partition(s): Select only Slurm partion <partition>[,partition2,...]
	-u username: Print only user <username> 
	-g groupname: Print only users in UNIX group <groupname>
	-G: Print only groupwise summed accounting data
	-T: Print Trackable resource (TRES) GPU usage in stead of CPU usage
	-N: Print NODE usage in stead of CPU usage
	-W directory: Print only jobs with this string in the job WorkDir
	-r: Report name prefix
	-n: No header information is printed (append to existing report)
	-h: Print this help information

The Start_time and End_time values specify the date/time interval of
job completion/termination (see "man sacct").

Hint: Specify Start/End time as MMDD (Month and Date)
EOF
}

#####################################################################################

# Report file prefix
REPORT_PREFIX=/tmp/Slurm_report_acct_
export partition=""
export username=""
export groupname=""
export workdir=""
export ALLGROUPS=0
export reportby="users"
# Default: CPU accounting
export TRES="cpus"
# Alternative accountings: NODEUSAGE or TRES/GPU
export NODEUSAGE=0
export TRESGPU=0

export SORTCOLUMN=5
export printheader=1
export month="last"
# A separator line:
line="--------------------------------------------------------------------------------"

# Process options
while getopts "p:u:g:s:e:r:m:W:cywGTNhn" options; do
	case $options in
		p )     export partition=$OPTARG
			echo " - Print only accounting in Slurm partition $OPTARG"
			;;
		u )     export username=$OPTARG
			export ALLGROUPS=0
			echo " - Print only user $OPTARG"
			;;
		g )     export groupname="$OPTARG"
			export ALLGROUPS=0
	    		export SORTCOLUMN=5
			echo " - Print only users in UNIX group $OPTARG"
			;;
		G )     export ALLGROUPS=1
			export reportby="groups"
			export username=""
			export groupname=""
	    		export SORTCOLUMN=4
			echo " - Print only groupwise summed accounting data"
			;;
		T )     export TRESGPU=1	# TRES GPU accounting
			export TRES="gpus"
	    		export SORTCOLUMN=4
			echo " - Print Trackable resource (TRES) GPU usage"
			;;
		N )     export NODEUSAGE=1	# NODE accounting
			export TRES="node"
	    		export SORTCOLUMN=4
			echo " - Print NODE usage"
			;;
		s )     export start_time=$OPTARG
			echo " - Start date $OPTARG"
			REPORT_NAME=${start_time}_${end_time}
			;;
		e )     export end_time=$OPTARG
			echo " - End date $OPTARG"
			REPORT_NAME=${start_time}_${end_time}
			;;
		m )     echo " - Select month $OPTARG"
			start_time=`date -d "1$OPTARG" +%m01%y`
			end_time=`date -d "1$OPTARG + 1 month" +%m01%y`
			MONTH=`date -d "1$OPTARG" +%B`
			YEAR=`date -d "1$OPTARG" +%Y`
			REPORT_NAME=${MONTH}_${YEAR}
			;;
		c )     export start_time=`date +%m01%y`
			export end_time=`date +%m%d%y`
			echo " - Select current month from $start_time until $end_time"
			REPORT_NAME=Current_month
			;;
		y )     export start_time=`date +0101%y`
			export end_time=`date +%m%d%y`
			echo " - Select current year from $start_time until $end_time"
			REPORT_NAME=Current_year
			;;
		w )     export start_time=`date -d 'last week' +%m%d%y`
			export end_time=`date +%m%d%y`
			echo " - Select last week from $start_time until $end_time"
			REPORT_NAME=Last_week
			;;
		W )     export workdir=$OPTARG
			echo " - Print only accounting data for jobs with working directory $workdir"
			;;
		r )     export REPORT_PREFIX="$OPTARG"
			echo " - Report prefix: $OPTARG"
			;;
		n )     export printheader=0
			;;
		h|? ) usage
			exit 1;;
		* ) usage
			exit 1;;
	esac
done
shift $((OPTIND-1))

if [[ $TRESGPU -eq 1 && $NODEUSAGE -eq 1 ]]
then
	echo "ERROR: Cannot specify both TRES/GPU and NODE usage"
	exit -1
fi

#
# Default period: last month 
#
# Test if either start_time or end_time are empty strings
if [[ "$start_time" == "" || "$end_time" == "" ]]
then
	MONTH=`date -d "last month" +%B`
	YEAR=`date -d "last month" +%Y`
	REPORT_NAME=${MONTH}_${YEAR}
	start_time=`date -d "last month" +%m01%y`
	end_time=`date -d "last month + 1 month" +%m01%y`
fi

# Check partition names
if [[ "$partition" != "" ]]
then
	for p in `echo $partition | sed 's/,/ /g'`
	do
		# echo "Check partition $p"
	if [[ "`sinfo -h -p $p -O PartitionName`" == "" ]]
	then
			echo "WARNING: Invalid partition name $p"
			# echo "Valid partition names are:"
			# sinfo -O "PartitionName"
		fi
	done
fi

# Test username
if [[ "$username" != "" ]]
then
	if [[ "`sacctmgr -p -n show assoc where users=$username`" == "" ]]
	then
		echo "Error selecting Slurm username $username"
		exit -1
	fi
fi
# Test groupname
if [[ "$groupname" != "" ]]
then
	getent group $groupname > /dev/null
	if [[ "$?" -ne 0 ]]
	then
		echo "Error selecting UNIX groupname $groupname (it does not exist)"
		exit -1
	fi
fi

#####################################################################################
#
# Print a heading, and make selection for sacct report
#
# First report overall statistics including nicely formatted start/end date:
# Change the date/time format in report header for readibility (formats in "man strftime")

REPORT=${REPORT_PREFIX}${REPORT_NAME}
export SLURM_TIME_FORMAT="%d-%b-%Y_%R"

# Selections for sacct:
selection=""

# Print a report header

if [[ $printheader -gt 0 ]]
then
	# Print a sreport header (overwrite any existing file)
	sreport cluster utilization start=$start_time end=$end_time -t percent > $REPORT
fi

if [[ $NODEUSAGE -gt 0 ]]
then
	reporttype="NODE"
elif [[ $TRESGPU -gt 0 ]]
then
	reporttype="GPU"
else
	reporttype="CPU"
fi

# Heading with a separating line and space
cat <<EOF >> $REPORT

$line

$reporttype usage report by $reportby

EOF

# Selection of specific partitions
if [[ "$partition" != "" ]]
then
	echo " - Partition(s) selected: $partition" >> $REPORT
	selection="--partition $partition $selection"
fi
# Selection of users
if [[ "$username" != "" ]]
then
	echo " - User name selected: $username" >> $REPORT
	selection="--user $username $selection"
else
	# Select all users
	selection="--allusers $selection"
fi

if [[ $ALLGROUPS -eq 0 ]]
then
	# User statistics
	if [[ "$workdir" != "" ]]
	then
		echo " - Print only accounting data for jobs with working directory $workdir" >> $REPORT
	fi
	echo >> $REPORT
	echo "Usage sorted by top users:" >> $REPORT
	# echo "Jobs completed/terminated between date/time $start_time and $end_time"
	if [[ "$groupname" != "" ]]
	then
		echo "Group name selected: $groupname" >> $REPORT
		selection="--group $groupname $selection"
	fi
	# echo "                             Wallclock          Average Average" >> $REPORT
	# echo "Username    Group    #jobs       hours  Percent  #cpus  q-hours  Full name" >> $REPORT
	# echo "--------    -----  ------- -----------  ------- ------- -------  ---------" >> $REPORT
	cat <<EOF >> $REPORT
                             Wallclock           Energy Average Average
Username    Group    #jobs   $TRES-hrs   Percent    kWh   #$TRES  q-hours    Full name
--------    -----  ------- -----------  ------- ------- ------- -------  ---------
EOF
else
	# Group statistics
	echo >> $REPORT
	if [[ "$workdir" != "" ]]
	then
		echo " - Print only accounting data for jobs with working directory $workdir" >> $REPORT
		echo >> $REPORT
	fi
	echo "Usage sorted by top groups:" >> $REPORT
	# echo "Jobs completed/terminated between date/time $start_time and $end_time"
	cat <<EOF >> $REPORT
                      Wallclock           Energy  Average Average
     Group    #jobs   $TRES-hrs   Percent     kWh  #$TRES   q-hours
     -----  ------- -----------  ------- -------  ------- -------
EOF
fi

#####################################################################################
#
# Get and process Slurm accounting records

# Get length of strings for sacct formatting
if [[ "$usernamelength" != "" ]]
then
	ulen="%${#username}"
fi
if [[ "$groupnamelength" != "" ]]
then
	glen="%${#groupname}"
fi

# Report time in seconds:
export SLURM_TIME_FORMAT="%s"
# Request job data
export FORMAT="JobID,User${ulen},Group${glen},Partition,AllocNodes,AllocCPUS,AllocTRES,Submit,Eligible,Start,End,ElapsedRAW,CPUTimeRAW,State,ConsumedEnergyRaw,WorkDir"
# Request job states: CAncelled, ReQueued, CompleteD, Failed, TimeOut, PReempted, Out_Of_Memory
export STATE="ca,rq,cd,f,to,pr,oom"

# Get Slurm individual job accounting records using the "sacct" command
# The "-a" flag was removed 04-Jan-2023
sacct $selection -np -X -S $start_time -E $end_time -o $FORMAT -s $STATE | awk -F"|" '
BEGIN {
	userselect=ENVIRON["username"]
	groupselect=ENVIRON["groupname"]
	ALLGROUPS=ENVIRON["ALLGROUPS"]
	TRESGPU=ENVIRON["TRESGPU"]
	NODEUSAGE=ENVIRON["NODEUSAGE"]
	workdir=ENVIRON["workdir"]
	totaljobs=0
	giga=1000000000
	# Maximum possible node power
	maxpower = 15000
	kWh=3600000	# 1 kWh is this many Joules
	# First get the list of user full names from /etc/passwd lines
	COMMAND="getent passwd"
	while (COMMAND | getline ) {
		split($0,b,":")		# Split password line into fields
		fullname[b[1]] = b[5]	# Full name b[5] of this username (b[1])
		# print b[1], fullname[b[1]]
	}
	close(COMMAND)
}
{
	# Parse input data and make sanity checks
	JobID	= $1		# JobID
	user	= $2		# User name
	group	= $3		# Group name
	part	= $4		# Slurm partition name for this job
	allocnodes = $5		# Number of nodes allocated
	alloccpus = $6		# Total number of CPUs allocated (>= allocnodes)
	alloctres = $7		# TRES resources (GPUs etc.) allocated
	submit	= $8		# submit time
	eligible= $9		# eligible time
	if (eligible == "Unknown") eligible = submit
	start	= $10		# Job start time in epoch seconds
	end	= $11		# Job end time in epoch seconds
	if (start == "Unknown" || start == "None") start = end
	wall	= end - start
	elapsed	= $12		# Job elapsed CPU time in seconds
	if (elapsed <= 0) next	# Skip jobs with zero elapsed time
	cputime	= $13		# CPU time in seconds
	state	= $14		# Job state
	wait	= start - eligible
	if (wait < 0) wait = 0	# Should not happen

	#
	# GPU accounting:
	#
	#   AllocTRES requires AccountingStorageTRES=gres/gpu in slurm.conf
	#   Parse the alloctres field and look for gres/gpu=XX number of gpus field
	#     Example: billing=4,cpu=2,gres/gpu:rtx3090=1,gres/gpu=1,mem=4000M,node=1
	ngpus = 0	# Number of GPUs allocated
	if (TRESGPU > 0 && alloctres != "" && split(alloctres, array, ",") > 0) {
		for (i in array) {
			if (gsub("gres/gpu=", "", array[i]) == 1)
				ngpus = array[i]
		}
		delete array
		if (ngpus == 0) next	# Skip non_GPU jobs
	}

	# Total energy consumed by a job, in joules. 
	# BEWARE: If multiple jobs share a node, we cannot assign an energy to each individual job but only the total energy!
	# Therefore the energy usage may be counted multiple times.
	joules	= $15
	# Incorrect astronomically large joules numbers may occur, see https://support.schedmd.com/show_bug.cgi?id=20207
	# The acct_gather_energy/ipmi issues were fixed in Slurm 24.11
	if (joules == "" || joules > 10*giga) joules = 0
	# Check sanity of power (joules/elapsed) must be less than maxpower Watts
	power = joules / elapsed
	if (power > maxpower) joules = 0
	jobworkdir	= $16	# Job working directory

	# Usage of resources: cpus or nodes
	if (NODEUSAGE == 0)
		usage = alloccpus
	else
		usage = allocnodes

	# Cluster TOTAL accounting
	totaljobs++
	totalwait += wait
	totalusage += usage*elapsed
	wallnodetotal += usage*wall
	wallgputotal += ngpus*wall
	wallsecs += wall

	# Check if this job matches selection criteria
	if (userselect != "" && user != userselect) next
	if (groupselect != "" && group != groupselect) next
	if (workdir != "" && jobworkdir !~ workdir) next

	# User accounting (a user may belong to several groups)
	usernamegroup[user,group] = user
	fullnamegroup[user,group] = fullname[user]
	usergroup[user,group] = group
	jobs[user,group]++
	# Currently unused data:
	# usagesum[user,group] += usage*elapsed
	# if (usage < minnodes[user,group]) minnodes[user,group] = usage
	# if (usage > maxnodes[user,group]) maxnodes[user,group] = usage
	wallnodesum[user,group] += usage*wall
	wallgpusum[user,group] += ngpus*wall
	walltimesum[user,group] += wall
	joulesused[user,group] += joules
	waittime[user,group] += wait

	# Group accounting
	groupname[group]=group
	group_jobs[group]++
	# Currently unused data:
	# group_usagesum[group] += usage*elapsed
	# if (usage < group_minnodes[group]) group_minnodes[group] = usage
	# if (usage > group_maxnodes[group]) group_maxnodes[group] = usage
	group_wallnodesum[group] += usage*wall
	group_wallgpusum[group] += ngpus*wall
	group_walltimesum[group] += wall
	group_waittime[group] += wait
	groupjoulesused[group] += joules
	totaljoules += joules
} END {
	# Some average values
	if (totaljobs > 0)
		totalwaitaverage = totalwait/totaljobs
	else
		totalwaitaverage = 0
	if (wallsecs > 0) {
		nodesaverage = wallnodetotal/wallsecs
		gpuaverage = wallgputotal/wallsecs
	} else {
		nodesaverage = 0
		gpuaverage = 0
	}
	# Usage in hours
	cpunodehours = totalusage / 3600
	wallnodehours = wallnodetotal / 3600
	wallgpuhours = wallgputotal / 3600
	wallhours = wallsecs / 3600
	# if (totaljobs == 0 || cpunodehours == 0 || wallnodehours == 0 || wallhours == 0) {
	#	 print "ERROR: Zero CPU hours recorded in specified date interval"
	#	 print "totaljobs = ", totaljobs, "cpunodehours = ", cpunodehours, "wallnodehours = ", wallnodehours, "wallhours = ", wallhours
	#	 exit 1
	# }

	if (ALLGROUPS == 0) {
		# Per-user accounting
		# -------------------
		format = "%8.8s %8.8s %8d  %10.1f  %7.2f %7.0f %7.2f %7.2f  %s\n"
		groupjobs = 0
		grouphours = 0
		groupjoules = 0
		for (ug in usernamegroup) {
			if (length(groupselect) > 0 && usergroup[ug] != groupselect) continue
			if (wallnodetotal > 0 && jobs[ug] > 0 && walltimesum[ug] > 0)
				# CPU/NODE or GPU accounting
				if (TRESGPU == 0) {
					w1 = wallnodesum[ug]
					w2 = wallnodetotal
				} else {
					w1 = wallgpusum[ug]
					w2 = wallgputotal
					if (w1 == 0) continue	# Zero GPU usage
				}
				printf(format, usernamegroup[ug], usergroup[ug],
					jobs[ug], w1/3600, 100*w1/w2, joulesused[ug]/kWh,
					w1/walltimesum[ug], waittime[ug]/jobs[ug]/3600, fullnamegroup[ug])
			groupjobs += jobs[ug]
			groupnodehours += wallnodesum[ug]/3600
			groupgpuhours += wallgpusum[ug]/3600
			grouphours += walltimesum[ug]/3600
			groupwait += waittime[ug]
			groupjoules += groupjoulesused[ug]
			usercount++
		}
		# Print out total usage
		totalusers = "Number of users: " usercount
		# CPU/NODE or GPU accounting
		if (TRESGPU == 0) {
			avg = nodesaverage
			wtot = wallnodehours
			g = groupnodehours
		} else {
			avg = gpuaverage
			wtot = wallgpuhours
			g = groupgpuhours
		}
		printf(format, "TOTAL", "(All)", totaljobs, wtot, 100, totaljoules/kWh,
			avg, totalwaitaverage/3600, totalusers)
		# Print out group usage
		if (length(groupselect) > 0 && groupjobs > 0 && wtot > 0 && grouphours > 0 && groupjobs > 0)
			printf(format, "GROUP", groupselect, groupjobs, g,
				100*g/wtot, groupjoules/kWh,
				g/grouphours, groupwait/groupjobs/3600, "")
	} else {
		# Per-group accounting
		# --------------------
		format = "%10s %8d  %10.1f  %7.2f %7.0f  %7.2f %7.2f\n"
		# Sort arrays by element values:
		# https://www.gnu.org/software/gawk/manual/html_node/Controlling-Scanning.html
		PROCINFO["sorted_in"] = "@ind_num_desc"

		for (group in groupname) {
			# CPU or GPU accounting
			if (TRESGPU == 0) {
				w1 = group_wallnodesum[group]
				w2 = wallnodetotal
			} else {
				w1 = group_wallgpusum[group]
				w2 = wallgputotal
				if (w1 == 0) continue	# Zero GPU usage
			}
			if (group_jobs[group] > 0 && group_walltimesum[group] > 0)
				printf(format, groupname[group],
					group_jobs[group], w1/3600, 100*w1/w2, groupjoulesused[group]/kWh,
					w1/group_walltimesum[group], group_waittime[group]/group_jobs[group]/3600)
		}
		# CPU or GPU accounting
		if (TRESGPU == 0) {
			avg = nodesaverage
			wtot = wallnodehours
		} else {
			avg = gpuaverage
			wtot = wallgpuhours
		}
		printf(format, "TOTAL", totaljobs, wtot, 100, totaljoules/kWh, avg, totalwaitaverage/3600)
	}
} ' | env LC_ALL=C sort -r -n -k $SORTCOLUMN -k 3 -k 1d >> $REPORT

# The sort command sorts number of running procs in descending order
# on keys $SORTCOLUMN and 3, and alphabetical sort on key 1
# The LC_ALL=C ensures that Upper case is sorted before lower case.

if [[ $printheader -gt 0 ]]
then
        echo "Report generated to file $REPORT"
else
        echo "Report appended to file $REPORT"
fi

exit 0
